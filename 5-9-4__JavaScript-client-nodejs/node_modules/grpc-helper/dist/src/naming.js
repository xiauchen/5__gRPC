"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var dns = require("dns");
var url = require("url");
var qs = require("qs");
var events_1 = require("events");
var Bluebird = require("bluebird");
var debug = require("debug");
var _ = require("lodash");
var common_1 = require("./common");
Promise = Bluebird;
var log = debug('grpcHelper:naming');
var UpdateOp;
(function (UpdateOp) {
    UpdateOp[UpdateOp["ADD"] = 0] = "ADD";
    UpdateOp[UpdateOp["DEL"] = 1] = "DEL";
})(UpdateOp = exports.UpdateOp || (exports.UpdateOp = {}));
var DNSResolver = /** @class */ (function () {
    function DNSResolver() {
    }
    DNSResolver.prototype.parseUrl = function (target) {
        var _a = url.parse(target), query = _a.query, pathname = _a.pathname;
        if (!pathname)
            throw new common_1.GRPCHelperError('invalid pathname');
        return { pathname: pathname, query: qs.parse(query) };
    };
    /**
     * Resolve the dns src records
     * #### Curreny available query params:
     *   - [intervalMs=5000] number, determines how frequent the dns resolver lookup the srv records
     * @param {string} target In the format of _grpc._tcp.service-name[?intervalMs=5000]
     */
    DNSResolver.prototype.resolve = function (target) {
        var _a = this.parseUrl(target), pathname = _a.pathname, query = _a.query;
        log('parse target into basename %s, query %j', pathname, query);
        return new DNSWatcher(function () {
            return __awaiter(this, void 0, void 0, function () {
                var resolveSrv, records;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            resolveSrv = Promise.promisify(dns.resolveSrv);
                            return [4 /*yield*/, resolveSrv(pathname)];
                        case 1:
                            records = _a.sent();
                            return [2 /*return*/, _.map(records, function (record) {
                                    return {
                                        addr: record.name + ":" + record.port,
                                    };
                                })];
                    }
                });
            });
        }, query.intervalMs);
    };
    return DNSResolver;
}());
exports.DNSResolver = DNSResolver;
var StaticResolver = /** @class */ (function () {
    function StaticResolver() {
    }
    StaticResolver.prototype.resolve = function (target) {
        return new StaticWatcher(function () {
            return __awaiter(this, void 0, void 0, function () {
                var hosts;
                return __generator(this, function (_a) {
                    hosts = target.split(',');
                    return [2 /*return*/, _.map(hosts, function (host) {
                            return {
                                addr: host,
                            };
                        })];
                });
            });
        });
    };
    return StaticResolver;
}());
exports.StaticResolver = StaticResolver;
var DNSWatcher = /** @class */ (function (_super) {
    __extends(DNSWatcher, _super);
    function DNSWatcher(resolveAddrs, intervalMs) {
        if (intervalMs === void 0) { intervalMs = 5000; }
        var _this = _super.call(this) || this;
        _this.addrMap = {};
        _this.updates = [];
        _this.resolveAddrs = resolveAddrs;
        _this.update();
        _this.interval = setInterval(_this.update.bind(_this), intervalMs);
        return _this;
    }
    DNSWatcher.prototype.update = function () {
        return __awaiter(this, void 0, void 0, function () {
            var addrs, e_1, newAddrMap;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        addrs = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.resolveAddrs()];
                    case 2:
                        addrs = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        this.emit('error', e_1);
                        return [2 /*return*/];
                    case 4:
                        newAddrMap = _.keyBy(addrs, 'addr');
                        _.each(this.addrMap, function (a, k) {
                            if (!newAddrMap[k]) {
                                _this.updates.push({
                                    op: UpdateOp.DEL,
                                    addr: k,
                                });
                            }
                        });
                        _.each(newAddrMap, function (a, k) {
                            if (!_this.addrMap[k]) {
                                _this.updates.push({
                                    op: UpdateOp.ADD,
                                    addr: k,
                                });
                            }
                        });
                        if (this.updates.length) {
                            this.emit('updates');
                        }
                        this.addrMap = newAddrMap;
                        return [2 /*return*/];
                }
            });
        });
    };
    DNSWatcher.prototype.next = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                log('wait for updates');
                return [2 /*return*/, new Promise(function (resolve) {
                        _this.once('updates', function () {
                            if (_this.updates.length) {
                                resolve(_this.updates);
                                _this.updates = [];
                            }
                        });
                    })];
            });
        });
    };
    DNSWatcher.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                clearInterval(this.interval);
                return [2 /*return*/];
            });
        });
    };
    return DNSWatcher;
}(events_1.EventEmitter));
exports.DNSWatcher = DNSWatcher;
var StaticWatcher = /** @class */ (function (_super) {
    __extends(StaticWatcher, _super);
    function StaticWatcher(resolveAddrs) {
        var _this = _super.call(this) || this;
        _this.updates = [];
        _this.resolveAddrs = resolveAddrs;
        _this.update();
        return _this;
    }
    StaticWatcher.prototype.update = function () {
        return __awaiter(this, void 0, void 0, function () {
            var addrs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveAddrs()];
                    case 1:
                        addrs = _a.sent();
                        this.updates = _.map(addrs, function (a) {
                            return {
                                addr: a.addr,
                                op: UpdateOp.ADD,
                            };
                        });
                        this.emit('updates');
                        return [2 /*return*/];
                }
            });
        });
    };
    StaticWatcher.prototype.next = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        _this.once('updates', function () {
                            if (_this.updates.length) {
                                resolve(_this.updates);
                                _this.updates = [];
                            }
                        });
                    })];
            });
        });
    };
    StaticWatcher.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    return StaticWatcher;
}(events_1.EventEmitter));
exports.StaticWatcher = StaticWatcher;
//# sourceMappingURL=naming.js.map