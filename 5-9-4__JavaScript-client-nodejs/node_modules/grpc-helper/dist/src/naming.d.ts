/// <reference types="node" />
import { EventEmitter } from 'events';
export interface Address {
    addr: string;
}
export declare enum UpdateOp {
    ADD = 0,
    DEL = 1
}
export interface Update {
    op: UpdateOp;
    addr: string;
}
export interface Watcher {
    next(): Promise<Update[]>;
    close(): Promise<void>;
}
export interface Resolver {
    resolve(target: string): Watcher;
}
export declare class DNSResolver implements Resolver {
    parseUrl(target: string): any;
    /**
     * Resolve the dns src records
     * #### Curreny available query params:
     *   - [intervalMs=5000] number, determines how frequent the dns resolver lookup the srv records
     * @param {string} target In the format of _grpc._tcp.service-name[?intervalMs=5000]
     */
    resolve(target: string): Watcher;
}
export declare class StaticResolver implements Resolver {
    resolve(target: string): Watcher;
}
export declare class DNSWatcher extends EventEmitter implements Watcher {
    private addrMap;
    private resolveAddrs;
    private updates;
    private interval;
    constructor(resolveAddrs: () => Promise<Address[]>, intervalMs?: number);
    private update;
    next(): Promise<Update[]>;
    close(): Promise<void>;
}
export declare class StaticWatcher extends EventEmitter implements Watcher {
    private resolveAddrs;
    private updates;
    constructor(resolveAddrs: () => Promise<Address[]>);
    private update;
    next(): Promise<Update[]>;
    close(): Promise<void>;
}
