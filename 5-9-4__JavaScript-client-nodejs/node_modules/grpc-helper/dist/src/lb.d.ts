/// <reference types="node" />
import { GRPCHelperClient } from './common';
import { Resolver } from './naming';
import { EventEmitter } from 'events';
import { ClientFactory } from './client';
export interface Balancer {
    start(target: string): any;
    up(addr: string): () => void;
    down(addr: string): void;
    get(): GRPCHelperClient;
    close(): Promise<void>;
    waitForReady(): Promise<void>;
}
export declare class RoundRobinBalancer extends EventEmitter implements Balancer {
    private next;
    private clients;
    private resolver;
    private watcher;
    private isReady;
    private clientFactory;
    constructor(resolver: Resolver, clientFactory: ClientFactory);
    waitForReady(): Promise<void>;
    private watchUpdates;
    start(target: string): void;
    up(addr: string): () => void;
    down(addr: string): void;
    get(): GRPCHelperClient;
    close(): Promise<void>;
}
